// Generated by CIRCT unknown git version
module gesummv_hir(	// gesummv.mlir:9:1
  input  [31:0] alpha,
                beta,
                A_p0_rd_data,
                B_p0_rd_data,
                X_p0_rd_data,
  input         t,
                clk,
                rst,
  output        tmp_p0_addr_en,
  output [2:0]  tmp_p0_addr_data,
  output        tmp_p0_wr_en,
  output [31:0] tmp_p0_wr_data,
  output        A_p0_addr_en,
  output [5:0]  A_p0_addr_data,
  output        A_p0_rd_en,
                B_p0_addr_en,
  output [5:0]  B_p0_addr_data,
  output        B_p0_rd_en,
                X_p0_addr_en,
  output [2:0]  X_p0_addr_data,
  output        X_p0_rd_en,
                Y_p0_addr_en,
  output [2:0]  Y_p0_addr_data,
  output        Y_p0_wr_en,
  output [31:0] Y_p0_wr_data
);

  wire        _GEN;
  wire [31:0] _GEN_0;
  wire        _GEN_1;
  wire [31:0] _GEN_2;
  wire [2:0]  _GEN_3;
  wire [31:0] _GEN_4;
  wire [31:0] _GEN_5;
  wire        _GEN_6;
  wire [2:0]  _GEN_7;
  wire        _GEN_8;
  wire        _GEN_9;
  wire [63:0] _GEN_10;
  wire [31:0] _GEN_11;
  wire        _GEN_12;
  wire [31:0] _GEN_13;
  wire        _GEN_14;
  wire        _GEN_15;
  reg         _GEN_16;
  wire        probe_0_valid;
  wire [31:0] _GEN_17;
  wire        _GEN_18;
  wire [31:0] _GEN_19;
  wire        _GEN_20;
  wire [31:0] _reg_1x32_r0_w1_inst8_p0_rd_data;
  wire [31:0] _reg_1x32_r0_w1_inst7_p0_rd_data;
  wire [2:0]  _reg_1x3_r0_w1_inst6_p0_rd_data;
  wire [31:0] _reg_1x32_r0_w1_inst5_p0_rd_data;
  wire [31:0] _reg_1x32_r0_w1_inst4_p0_rd_data;
  wire [2:0]  _reg_1x3_r0_w1_inst3_p0_rd_data;
  wire [63:0] _reg_1x64_r0_w1_inst2_p0_rd_data;
  wire [63:0] _ForOP_SM0_iv;
  wire        _ForOP_SM0_done;
  wire [63:0] _ForOP_SM1_iv;
  wire        _ForOP_SM1_done;
  wire [31:0] _reg_1x32_r0_w1_inst1_p0_rd_data;
  wire [31:0] _reg_1x32_r0_w1_inst0_p0_rd_data;
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst0 (
    .p0_rd_en   (_GEN_12),
    .p1_wr_en   (_GEN_18),
    .p1_wr_data (_GEN_17),
    .t          (t),
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst0_p0_rd_data)
  );
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst1 (
    .p0_rd_en   (_GEN_15),
    .p1_wr_en   (_GEN_20),
    .p1_wr_data (_GEN_19),
    .t          (t),
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst1_p0_rd_data)
  );
  wire        _GEN_21 = t & 1'h1;
  wire        _GEN_22 = _GEN_21 | _GEN & ~_ForOP_SM1_done;	// gesummv.mlir:21:3
  wire        _GEN_23 = t & ~(1'h1);
  wire [31:0] _GEN_24 = _GEN_21 ? alpha : _reg_1x32_r0_w1_inst7_p0_rd_data;
  wire [31:0] _GEN_25 = _GEN_21 ? beta : _reg_1x32_r0_w1_inst8_p0_rd_data;
  ForOp_state_machine1 ForOP_SM1 (
    .lb    (64'h0),
    .ub    (64'h8),
    .step  (64'h1),
    .start (t),
    .next  (_GEN_22),	// gesummv.mlir:21:3
    .clk   (clk),
    .rst   (rst),
    .iv    (_ForOP_SM1_iv),
    .done  (_ForOP_SM1_done)
  );
  assign _GEN_20 = _GEN_22 ? 1'h1 : _GEN_14;	// gesummv.mlir:21:3
  assign _GEN_19 = _GEN_22 ? 32'h0 : _GEN_13;	// gesummv.mlir:18:13, :21:3
  assign _GEN_18 = _GEN_22 ? 1'h1 : _GEN_14;	// gesummv.mlir:21:3
  assign _GEN_17 = _GEN_22 ? 32'h0 : _GEN_11;	// gesummv.mlir:18:13, :21:3
  wire        _GEN_26 = _GEN_22 & 1'h1;	// gesummv.mlir:21:3
  wire        _GEN_27 = _GEN_22 & ~(1'h1);	// gesummv.mlir:21:3
  wire        _GEN_28 = _GEN_27 | _GEN_16 & _ForOP_SM0_done;	// gesummv.mlir:24:5
  wire [63:0] _GEN_29 = _GEN_26 ? _ForOP_SM1_iv : _reg_1x64_r0_w1_inst2_p0_rd_data;
  ForOp_state_machine0 ForOP_SM0 (
    .lb    (64'h0),
    .ub    (64'h8),
    .step  (64'h1),
    .start (_GEN_22),	// gesummv.mlir:21:3
    .next  (probe_0_valid),
    .clk   (clk),
    .rst   (rst),
    .iv    (_ForOP_SM0_iv),
    .done  (_ForOP_SM0_done)
  );
  wire [5:0]  _GEN_30 = {_GEN_29[2:0], _ForOP_SM0_iv[2:0]};	// gesummv.mlir:25:12
  wire        _GEN_31 = probe_0_valid ? 1'h1 : 1'h0;
  reg         _GEN_32;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_32 <= 1'h0;
    else
      _GEN_32 <= probe_0_valid;
  end // always_ff @(posedge)
  wire [31:0] probe_0;
  assign probe_0 = A_p0_rd_data;
  //PROBE: probe_0
  assign probe_0_valid = _GEN_26 | _GEN_16 & ~_ForOP_SM0_done;	// gesummv.mlir:24:5
  //PROBE: probe_0_valid
  reg         _GEN_33;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_33 <= 1'h0;
    else
      _GEN_33 <= probe_0_valid;
  end // always_ff @(posedge)
  reg         _GEN_34;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_34 <= 1'h0;
    else
      _GEN_34 <= probe_0_valid;
  end // always_ff @(posedge)
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_16 <= 1'h0;
    else
      _GEN_16 <= probe_0_valid;
  end // always_ff @(posedge)
  assign _GEN_15 = _GEN_16 ? 1'h1 : _GEN_9;
  assign _GEN_14 = _GEN_16 ? 1'h1 : 1'h0;
  assign _GEN_13 =
    _GEN_16 ? _reg_1x32_r0_w1_inst1_p0_rd_data + A_p0_rd_data * X_p0_rd_data : 32'bx;	// gesummv.mlir:28:13, :32:13
  assign _GEN_12 = _GEN_16 ? 1'h1 : _GEN_9;
  assign _GEN_11 =
    _GEN_16 ? _reg_1x32_r0_w1_inst0_p0_rd_data + B_p0_rd_data * X_p0_rd_data : 32'bx;	// gesummv.mlir:30:13, :35:13
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd64)
  ) reg_1x64_r0_w1_inst2 (
    .p0_rd_en   (_GEN_14),
    .p1_wr_en   (_GEN_31),
    .p1_wr_data (_GEN_10),
    .t          (probe_0_valid),
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x64_r0_w1_inst2_p0_rd_data)
  );
  assign _GEN_10 = probe_0_valid ? _GEN_29 : 64'bx;
  reg         _GEN_35;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_35 <= 1'h0;
    else
      _GEN_35 <= _GEN_28;	// gesummv.mlir:24:5
  end // always_ff @(posedge)
  assign _GEN_9 = _GEN_35 ? 1'h1 : 1'h0;
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd3)
  ) reg_1x3_r0_w1_inst3 (
    .p0_rd_en   (_GEN_6),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_7),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x3_r0_w1_inst3_p0_rd_data)
  );
  assign _GEN_8 = _GEN_22 ? 1'h1 : 1'h0;	// gesummv.mlir:21:3
  assign _GEN_7 = _GEN_22 ? _ForOP_SM1_iv[2:0] : 3'bx;	// gesummv.mlir:21:3
  reg  [8:0]  _GEN_36;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_36 <= {9{1'h0}};
    else
      _GEN_36 <= {_GEN_36[4'h0 +: 8], {1{_GEN_22}}};	// gesummv.mlir:21:3
  end // always_ff @(posedge)
  assign _GEN_6 = _GEN_36[4'h8] ? 1'h1 : 1'h0;
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst4 (
    .p0_rd_en   (_GEN_6),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_5),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst4_p0_rd_data)
  );
  assign _GEN_5 = _GEN_22 ? _GEN_24 : 32'bx;	// gesummv.mlir:21:3
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst5 (
    .p0_rd_en   (_GEN_6),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_4),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst5_p0_rd_data)
  );
  assign _GEN_4 = _GEN_22 ? _GEN_25 : 32'bx;	// gesummv.mlir:21:3
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd3)
  ) reg_1x3_r0_w1_inst6 (
    .p0_rd_en   (_GEN_6),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_3),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x3_r0_w1_inst6_p0_rd_data)
  );
  assign _GEN_3 = _GEN_22 ? _ForOP_SM1_iv[2:0] : 3'bx;	// gesummv.mlir:21:3
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst7 (
    .p0_rd_en   (_GEN_1),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_2),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst7_p0_rd_data)
  );
  assign _GEN_2 = _GEN_22 ? _GEN_24 : 32'bx;	// gesummv.mlir:21:3
  reg  [17:0] _GEN_37;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_37 <= {18{1'h0}};
    else
      _GEN_37 <= {_GEN_37[5'h0 +: 17], {1{_GEN_22}}};	// gesummv.mlir:21:3
  end // always_ff @(posedge)
  assign _GEN_1 = _GEN_37[5'h11] ? 1'h1 : 1'h0;
  reg_r0_w1 #(
    .ELEMENT_WIDTH(64'd32)
  ) reg_1x32_r0_w1_inst8 (
    .p0_rd_en   (_GEN_1),
    .p1_wr_en   (_GEN_8),
    .p1_wr_data (_GEN_0),
    .t          (_GEN_22),	// gesummv.mlir:21:3
    .clk        (clk),
    .rst        (rst),
    .p0_rd_data (_reg_1x32_r0_w1_inst8_p0_rd_data)
  );
  assign _GEN_0 = _GEN_22 ? _GEN_25 : 32'bx;	// gesummv.mlir:21:3
  reg  [9:0]  _GEN_38;
  always_ff @(posedge clk) begin
    if (rst)
      _GEN_38 <= {10{1'h0}};
    else
      _GEN_38 <= {_GEN_38[4'h0 +: 9], {1{_GEN_28}}};	// gesummv.mlir:24:5
  end // always_ff @(posedge)
  assign _GEN = _GEN_38[4'h9];
  assign tmp_p0_addr_en = _GEN_9;
  assign tmp_p0_addr_data = _GEN_35 ? _reg_1x3_r0_w1_inst3_p0_rd_data : 3'bx;
  assign tmp_p0_wr_en = _GEN_9;
  assign tmp_p0_wr_data = _GEN_35 ? _reg_1x32_r0_w1_inst1_p0_rd_data : 32'bx;
  assign A_p0_addr_en = _GEN_31;
  assign A_p0_addr_data = probe_0_valid ? _GEN_30 : 6'bx;	// gesummv.mlir:25:12
  assign A_p0_rd_en = _GEN_31;
  assign B_p0_addr_en = _GEN_31;
  assign B_p0_addr_data = probe_0_valid ? _GEN_30 : 6'bx;	// gesummv.mlir:25:12
  assign B_p0_rd_en = _GEN_31;
  assign X_p0_addr_en = _GEN_31;
  assign X_p0_addr_data = probe_0_valid ? _ForOP_SM0_iv[2:0] : 3'bx;
  assign X_p0_rd_en = _GEN_31;
  assign Y_p0_addr_en = _GEN_9;
  assign Y_p0_addr_data = _GEN_35 ? _reg_1x3_r0_w1_inst6_p0_rd_data : 3'bx;
  assign Y_p0_wr_en = _GEN_9;
  assign Y_p0_wr_data =
    _GEN_35
      ? _reg_1x32_r0_w1_inst4_p0_rd_data * _reg_1x32_r0_w1_inst1_p0_rd_data
        + _reg_1x32_r0_w1_inst5_p0_rd_data * _reg_1x32_r0_w1_inst0_p0_rd_data
      : 32'bx;	// gesummv.mlir:41:10, :42:10, :43:10
endmodule

